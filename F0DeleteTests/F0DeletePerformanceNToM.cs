using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Engines;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using ORM0Entities;
using ORM0Entities.autogenerated;

namespace F0DeleteTests;

[SimpleJob(RunStrategy.Throughput)]
[JsonExporter("", true)]
[RPlotExporter]
[CsvMeasurementsExporter]
[IterationCount(20)]
[WarmupCount(20)]
public class F0DeletePerformanceNToM : F0GlobalConfig.F0GlobalConfig
{
    private int cache = -1;

    [ParamsSource(nameof(valuesForNumberOfStatements))]
    public int numberOfStatements;

    public IEnumerable<int> valuesForNumberOfStatements()
    {
        return NumberOfBills;
    }

    [GlobalSetup]
    public void GlobalSetup()
    {
        DefineDatabaseModelUsingScript(FilePath);
    }

    private List<Article> articleList = new List<Article>();
    [IterationSetup]
    public void SetUp()
    {
        if (cache != numberOfStatements)
        {
            SetUpGenericF0();
            listInsertBills = NBuilderHelper.GetBillsAndArticles(numberOfStatements, NumberOfArticles,
                MinArticlesToTryAdd, MaxArticlesToTryAdd,articleList);
            cache = numberOfStatements;
        }
        else
        {
            var tempList = listInsertBills;
            SetUpGenericF0();
            listInsertBills = tempList;
        }
        
        context.AddRange(articleList);
        context.AddRange(listInsertBills);
        context.SaveChanges();
        ResetCache();
    }

    [IterationCleanup]
    public void CleanUp()
    {
        CleanBillsArticles();
    }

    [Benchmark]
    public void DeleteData()
    {
        context.AttachRange(listInsertBills);
        
        for (var i = 0; i < listInsertBills.Count; i++)
        {
            context.Bills.Remove(listInsertBills[i]);
            context.SaveChanges();
        }
    }
}